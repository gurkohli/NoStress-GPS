var request = require('request');
// Callbacks

//simulate GPS updates

function magCallback(data) {
  //console.log(data);
  request({
    url: "http://localhost:3000/mag",
    method: "POST",
    json: true,
    headers: {
        "content-type": "application/json",
    },
    body: data
  }, function(err, response, body) {
    //console.log(body)
  })
  //console.log("Sending POST data to Interface")
}

function gpsCallback(data) {;
  //console.log(data);
  request({
    url: "http://localhost:3000/gps",
    method: "POST",
    json: true,
    headers: {
        "content-type": "application/json",
    },
    body: data
  }, function(err, response, body) {
    //console.log(body)
  })
  //console.log("Sending POST data to Interface")
}


function accCallback(data) {
  //console.log(data);  
  request({
    url: "http://localhost:3000/acc",
    method: "POST",
    json: true,
    headers: {
        "content-type": "application/json",
    },
    body: data
  }, function(err, response, body) {
    //console.log(body)
  })
  //console.log("Sending POST data to Interface")
}

// Main

console.log('gps - echo');
var route = [[-123.1, 49.2811, 0, 90, 0], [-123.1, 49.2811, 0, 90, 0], [-123.1, 49.2811, 0, 90, 0], [-123.1, 49.2811, 0, 90, 0], [-123.1, 49.2811, 0, 90, 0], [-123.1, 49.2811, 60, 90, 40], [-123.099, 49.2811, 60, 90, 40], [-123.098, 49.2811, 60, 90, 40], [-123.097, 49.2811, 60, 90, 40], [-123.096, 49.2811, 60, 90, 40], [-123.095, 49.2811, 60, 90, 40], [-123.094, 49.2811, 60, 90, 40], [-123.093, 49.2811, 60, 90, 40], [-123.092, 49.2811, 60, 90, 40], [-123.091, 49.2811, 60, 90, 40], [-123.09, 49.2811, 60, 90, 90], [-123.088, 49.2811, 60, 90, 90], [-123.086, 49.2811, 60, 90, 90], [-123.084, 49.2811, 60, 90, 90], [-123.082, 49.2811, 60, 90, 90], [-123.08, 49.2811, 60, 90, 90], [-123.078, 49.2811, 60, 90, 90], [-123.076, 49.2811, 60, 90, 90], [-123.074, 49.2811, 60, 90, 90], [-123.072, 49.2811, 60, 90, 90], [-123.07, 49.2811, 60, 90, 90], [-123.068, 49.2811, 60, 90, 90], [-123.066, 49.2811, 60, 90, 90], [-123.064, 49.2811, 60, 90, 90], [-123.062, 49.2811, 60, 90, 90], [-123.06, 49.2811, 60, 90, 90], [-123.058, 49.2811, 60, 90, 90], [-123.056, 49.2811, 60, 90, 90], [-123.054, 49.2811, 60, 90, 90], [-123.052, 49.2811, 60, 90, 90], [-123.05, 49.2811, 60, 90, 40], [-123.049, 49.2811, 60, 90, 40], [-123.048, 49.2811, 60, 90, 40], [-123.047, 49.2811, 60, 90, 40], [-123.046, 49.2811, 60, 90, 40], [-123.045, 49.2811, 60, 90, 40], [-123.044, 49.2811, 60, 90, 40], [-123.043, 49.2811, 60, 90, 40], [-123.042, 49.2811, 60, 90, 40], [-123.041, 49.2811, 60, 90, 40], [-123.04, 49.2811, 60, 90, 40], [-123.039, 49.2811, 60, 90, 40], [-123.038, 49.2811, 60, 90, 40], [-123.037, 49.2811, 60, 90, 40], [-123.036, 49.2811, 60, 90, 40], [-123.035, 49.2811, 60, 90, 40], [-123.034, 49.2811, 60, 90, 40], [-123.033, 49.2811, 60, 90, 40], [-123.032, 49.2811, 60, 90, 40], [-123.031, 49.2811, 60, 90, 40], [-123.03, 49.2811, 60, 90, 40], [-123.029, 49.2811, 60, 90, 40], [-123.028, 49.2811, 60, 90, 40], [-123.027, 49.2811, 60, 90, 40], [-123.026, 49.2811, 60, 90, 40], [-123.025, 49.2811, 60, 90, 40], [-123.024, 49.2811, 60, 90, 40], [-123.023, 49.2811, 60, 90, 40], [-123.022, 49.2811, 60, 90, 40], [-123.021, 49.2811, 60, 90, 40], [-123.02, 49.2811, 60, 90, 40], [-123.019, 49.2811, 60, 90, 40], [-123.018, 49.2811, 60, 90, 40], [-123.017, 49.2811, 60, 90, 40], [-123.016, 49.2811, 60, 90, 40], [-123.015, 49.2811, 60, 90, 40], [-123.014, 49.2811, 60, 90, 40], [-123.013, 49.2811, 60, 90, 40], [-123.012, 49.2811, 60, 90, 40], [-123.011, 49.2811, 60, 90, 40], [-123.01, 49.2811, 60, 90, 40], [-123.009, 49.2811, 60, 90, 40], [-123.008, 49.2811, 60, 90, 40], [-123.007, 49.2811, 60, 90, 40], [-123.006, 49.2811, 60, 90, 40], [-123.005, 49.2811, 60, 90, 40], [-123.004, 49.2811, 60, 90, 40], [-123.003, 49.2811, 60, 90, 40], [-123.002, 49.2811, 60, 90, 40], [-123.001, 49.2811, 60, 90, 40], [-123.0, 49.2811, 0, 90, 0], [-123.0, 49.2811, 0, 90, 0], [-123.0, 49.2811, 0, 90, 0], [-123.0, 49.2811, 0, 90, 0], [-123.0, 49.2811, 0, 90, 0]]
timerValue = 1000 //ms
stream = route.length
i = 0
var myVar = setInterval(myTimer, timerValue); // create timer

function myTimer() {

	if(stream>i)
	{
		//ToDo read data GPS/Compas
		coordData = [ route[i][1], route[i][0] ];
   		gpsCallback(coordData);
   
    	angleData = [ route[i][2], route[i][3] ]; 
		magCallback(angleData);

		spdData = speed(route[i][4])
		spdData = JSON.stringify({ "data": spdData});
		spdData = JSON.parse(spdData);           
     	accCallback(spdData); // fast

		i++;
	}
	else
	{
		console.log('gps - test done');
		// We may send comand to terminate current route and remove crap from map
	}

}

function speed(spd) { // assumed km/h
	if(spd>60)
		return "Fast";
	else
		return "Slow";
}